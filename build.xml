<project name="LireRequestHandler" default="compile" basedir=".">
    <description>
        This buildfile is used to build and package the LIRE RequestHandler for SOLR
    </description>

    <property name="src" value="src/main/java"/>
    <property name="config" value="src/main/config"/>
    <property name="build" value="classes"/>
    <property name="dist" value="dist"/>
    <property name="versionstring" value="0.9.4_beta_2"/>
    <!-- path to test files -->
    <property name="test" value="test"/>
    <!-- path to documentation like README or CHANGES -->
    <property name="doc" value="src/main/doc"/>
    <!-- path to additional files like installer scripts, icons and batch files -->
    <property name="add.files" value="add.files"/>
    <!--<property name="solrlib" value="/data/digitalcandy/fusion/fusion/jetty/solr/webapps/solr/WEB-INF/lib/"/>-->
    <property name="solrlib" value="/Users/ferdous/projects/digitalcandy/fusion/jetty/solr/webapps/solr/WEB-INF/lib/"/>

    <!-- define the classpath  -->
    <path id="class.path">
        <fileset dir="lib" includes="*.jar"/>
        <pathelement location="${build}"/>
    </path>

    <target name="init">
        <tstamp/>
        <tstamp>
            <format property="touch.time" pattern="dd.MM.yyyy hh:mm aa"/>
        </tstamp>
        <mkdir dir="${build}"/>
    </target>


    <target name="compile" depends="clean, init">
        <propertyfile file="${config}/build.properties" comment="Properties of this specific LIRE Solr build">
            <entry key="build-date" type="date" value="now"/>
            <entry key="build-number" type="int" value="1" operation="+"/>
        </propertyfile>
        <property file="${config}/build.properties"/>
        
        <echo file="default.mf" append="false">Build-Date: ${touch.time}${line.separator}Build-Number: ${build-number}${line.separator}Class-Path: lib/JOpenSurf.jar lib/opencv-249.jar lib/commons-codec-1.9.jar lib/jhlabs.jar lib/common-image-3.0.jar lib/common-io-3.0.jar lib/common-lang-3.0.jar lib/imageio-core-3.0.jar lib/imageio-jpeg-3.0.jar lib/imageio-metadata-3.0.jar lib/imageio-tiff-3.0.jar${line.separator}Main-Class: net.semanticmetadata.lire.solr.Sandbox${line.separator}</echo>
        <javac srcdir="${src}" destdir="${build}" debug="true" debuglevel="lines,vars,source">
            <classpath refid="class.path"/>
        </javac>
        <copy todir="${build}">
            <fileset dir="${src}">
                <patternset>
                    <include name="**/*.*"/>
                    <exclude name="**/*.java"/>
                    <exclude name="**/*.html"/>
                    <exclude name="**/.svn/*"/>
                    <exclude name="**/.svn/*"/>
                </patternset>
            </fileset>
        </copy>
    </target>

    <target name="clean">
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
    </target>

    <target name="dist" depends="compile">
        <mkdir dir="${dist}"/>
        <!--mkdir dir="${dist}/lib"/>
        <mkdir dir="${dist}/docs"/-->

        <!--copy todir="${dist}">
            <fileset dir="lib">
                <patternset>
                    <include name="**/*.*"/>
                    <exclude name="**/CVS/*"/>
                    <exclude name="**/.svn/*"/>
                </patternset>
            </fileset>
        </copy-->
        <unjar src="lib/lire.jar" dest="${build}"/>
        <!-- replace the bit sampling data file -->

        <!--delete file="${build}/net/semanticmetadata/lire/indexing/hashing/LshBitSampling.obj"/-->
        <!--copy file="LshBitSampling.obj" todir="${build}/net/semanticmetadata/lire/indexing/hashing/"/-->

        <!--copy todir="${dist}/docs">
            <fileset dir="src/main/docs">
                <patternset>
                    <include name="**/*.*"/>
                    <exclude name="**/CVS/*"/>
                    <exclude name="**/.svn/*"/>
                </patternset>
            </fileset>
        </copy-->

        <jar jarfile="${dist}/lire-request-handler.jar" manifest="default.mf" basedir="${build}">
            <exclude name="**/apache/**" />
        </jar>
        <!-- copy libs -->
        <mkdir dir="${dist}/lib"/>
        <copy file="lib/commons-codec-1.9.jar" todir="${dist}/lib"/>
        <copy file="lib/jhlabs.jar" todir="${dist}/lib"/>
        <copy todir="${dist}/lib">
            <fileset dir="lib/imageio">
                <patternset>
                    <include name="*.jar"/>
                    <exclude name="**/CVS/*"/>
                    <exclude name="**/.svn/*"/>
                </patternset>
            </fileset>
        </copy>
    </target>

    <target name="copy_jar_to_jetty" depends="dist">
        <copy file="dist/lire-request-handler.jar" todir="${solrlib}"/>
    </target>
    	
    <target name="index" depends="compile">
        <!-- Note: This needs to be forked, otherwise multi threading won't work and the heap space will be exceeded soon. -->
        <java classpathref="class.path" classname="net.semanticmetadata.lire.solr.ParallelFullSolrIndexer" fork="true" maxmemory="4048m" error="indexer_error.log" output="indexer_output.log">
            <!--<jvmarg line="-Xmx4048m -server -Djava.awt.headless=true -Djava.library.path=lib/opencv"/>-->
            <jvmarg line="-Xmx4048m -server -Djava.library.path=lib/opencv"/>
            <!-- adapt this argument to use your pictures -->
            <arg line="-d ./testdata -i ./idx-cars -n 16"/>
            <!--<arg line="-l ./out.txt -i ./idx-cars -n 16"/>-->
            <!--
                Usage:

                $> ParallelIndexer -i <index> <-d <image-directory> | -l <image-list>> [-n <number of threads>]

                index             ... The directory of the index. Will be appended or created if not existing.
                images-directory  ... The directory the images are found in. It's traversed recursively.
                image-list        ... A list of images in a file, one per line. Use instead of images-directory.
                number of threads ... The number of threads used for extracting features, e.g. # of CPU cores.
            -->
        </java>
    </target>
    
    <target name="search" depends="compile">
        <!-- Note: This needs to be forked, otherwise multi threading won't work and the heap space will be exceeded soon. -->
        <java classpathref="class.path" classname="net.semanticmetadata.lire.solr.Sandbox" fork="true" maxmemory="4048m" error="indexer_error.log" output="indexer_output.log">
            <!--<jvmarg line="-Xmx4048m -server -Djava.awt.headless=true -Djava.library.path=lib/opencv"/>-->
            <jvmarg line="-Xmx4048m -server -Djava.library.path=lib/opencv"/>
            <!-- adapt this argument to use your pictures -->
            <arg line="-d ./testdata -i ./idx-cars -n 16"/>
            <!--<arg line="-l ./out.txt -i ./idx-cars -n 16"/>-->
            <!--
                Usage:

                $> ParallelIndexer -i <index> <-d <image-directory> | -l <image-list>> [-n <number of threads>]

                index             ... The directory of the index. Will be appended or created if not existing.
                images-directory  ... The directory the images are found in. It's traversed recursively.
                image-list        ... A list of images in a file, one per line. Use instead of images-directory.
                number of threads ... The number of threads used for extracting features, e.g. # of CPU cores.
            -->
        </java>
    </target>
	
	
</project>